@startuml

'!theme aws-orange
'!theme black-knight
'!theme cloudscape-design
'!theme hacker
'!theme reddress-darkblue
'!theme reddress-darkgreen
'!theme reddress-darkorange
!theme reddress-darkred
'!theme reddress-lightblue
'!theme reddress-lightgreen
'!theme reddress-lightorange
'!theme reddress-lightred
'!theme toy
top to bottom direction
skinparam linetype ortho

interface Callable<V>  {
  + call(): V
}
interface Comparable<T>  {
  + compareTo(T): int
}
class CustomExecutor {
  + CustomExecutor(): 
  + submit(Task<V>): Task<V>
  - submitTask(Task<?>): void
  + gracefullyTerminate(): void
  + submit(Callable<T>, TaskType): Task<T>
   currentMax: String
}
class Task<V> {
  + Task(Callable<V>, TaskType): 
  + Task(Callable<V>): 
  + get(): V
  + compareTo(Task): int
  + call(): V
  + createTask(Callable<V>, TaskType): Task<V>
  + get(long, TimeUnit): V
   Type: TaskType
   future: Future<V>
}
enum TaskType {
  - TaskType(int): 
  + values(): TaskType[]
  + valueOf(String): TaskType
  - validatePriority(int): boolean
   priority: int
   type: TaskType
   priorityValue: int
}

Callable            ^-[#008200,dashed]-  Task
Task            *-[#595959,plain]->  Callable
Task            -[#008200,dashed]-^  Comparable     
Task            *-[#595959,plain]->  TaskType
TaskType        -[#008200,dashed]-^  Comparable     
@enduml
